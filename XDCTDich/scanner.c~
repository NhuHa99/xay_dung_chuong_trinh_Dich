/* Scanner
 * @copyright (c) 2008, Hedspi, Hanoi University of Technology
 * @author Huu-Duc Nguyen
 * @version 1.0
 */

#include <stdio.h>
#include <stdlib.h>

#include "reader.h"
#include "charcode.h"
#include "token.h"
#include "error.h"


extern int lineNo;
extern int colNo;
extern int currentChar;

extern CharCode charCodes[];

/***************************************************************/

void skipBlank() {//bo qua khoang trong
  while (currentChar != EOF && charCodes[currentChar] == CHAR_SPACE)
    readChar();


  // TODO
}

void skipComment() {//bo qua chu thich
  while (1){
    //doc ki tu tiep theo
    readChar();
    
    if (currentChar == -1) { //cuoi file
      error(ERR_ENDOFCOMMENT, lineNo, colNo);}//ket thuc chu thich
    else if (charCodes[currentChar] == CHAR_TIMES) {//ki tu tiep theo la dau hoa thi
      readChar();//doc tiep den ki tu tiep theo
      if (currentChar == -1) {//cuoi cua file
	error(ERR_ENDOFCOMMENT, lineNo, colNo);//ket thuc chu thich
      } else if (charCodes[currentChar] == CHAR_RPAR){//neu ki tu tiep theo la dau dong ngoac
	//ket thuc comment
	readChar();
	return;
      }
    }
  }
}

Token* readIdentKeyword(void) {//doc tu khoa dinh danh
  int count=0;//khai bao bien dem bang 0
  Token* token = makeToken(TK_IDENT, lineNo, colNo);//tao mot token dinh danh
  while (charCodes[currentChar] == CHAR_LETTER || charCodes[currentChar] == CHAR_DIGIT){//khi ki tu hien tai la chu cai hoac so
    //them ki tu hien tai vao token dinh danh
    token->string[count] = currentChar;
    //tang chieu dai cua token dinh danh
    count++;
    //chuyen den ki tu tiep theo
    readChar();
  }
  
  token->string[count]= '\0';//ket thuc xau
  if (count> MAX_IDENT_LEN){//neu bien dem dai hon chieu dai dinh danh
    error(ERR_IDENTTOOLONG, lineNo, colNo - count);// thong bao loi
  }else {// nguoc lai
    TokenType type = checkKeyword(token->string);//dinh danh nay la mot tu khoa
    //mat khac
    if (type != TK_NONE){//dinh danh  nay k phai la loi
      token->tokenType = type;
    }
  }
  return token;
}

Token* readNumber(void) {//doc so
  int count =0;
  Token* token = makeToken(TK_NUMBER, lineNo, colNo);
  while( charCodes[current] != EOF && charCodes[current] == CHAR_DIGIT){
    if (count > 9) {//neu do dai cua bien >9
      error(ERR_IDENTTOOLONG, token->lineNo, token->colNo);//thong bao loi
    }
    token->string[count]= currentChar;//ki tu hien tai chinh la so
    count++;//tang do dai xau
    readChar();//chuyen den ki tu tiep theo
  }
  token->string[count]='\0';//ket thuc xau

  token->value = atoi(token->string);//chuyen so hien tai thanh chuoi
  return token;
}

Token* readConstChar(void) {//doc hang ki tu
  
  Token* token= makeToken(TK_CHAR, lineNo, colNo);
  readChar();
  if (currentChar == -1) { // End of File
    error(ERR_INVALIDCHARCONSTANT, token->lineNo, token->colNo);
  } else {
	switch(charCodes[currentChar]) {
	// Escape character for Single Quote:
	case CHAR_SINGLEQUOTE:
		// Read next character
		readChar();

		if (charCodes[currentChar] == CHAR_SINGLEQUOTE) {
		    token->string[0] = currentChar;

		    readChar();
		    if (charCodes[currentChar] == CHAR_SINGLEQUOTE) {
		        token->string[1] = '\0';

		        readChar();
		        return token;
		    } else {
		        error(ERR_INVALIDCHARCONSTANT, token->lineNo, token->colNo);
		    }

		} else {
			error(ERR_INVALIDCHARCONSTANT, token->lineNo, token->colNo);
		}
		break;
	default:
	    // Add the character to token string
        token->string[0] = currentChar;

		// Read next character
		readChar();

		switch(charCodes[currentChar]) {
		case CHAR_SINGLEQUOTE:
			// End token
			token->string[1] = '\0';

			readChar();
			return token;
		default:
			error(ERR_INVALIDCHARCONSTANT, token->lineNo, token->colNo);
			break;
		}
		break;
	}

  }
  return token;
  
}

Token* getToken(void) {
  Token *token;
  int ln, cn;

  if (currentChar == EOF) 
    return makeToken(TK_EOF, lineNo, colNo);

  switch (charCodes[currentChar]) {
  case CHAR_SPACE: skipBlank(); return getToken();
  case CHAR_LETTER: return readIdentKeyword();
  case CHAR_DIGIT: return readNumber();
  case CHAR_PLUS: 
    token = makeToken(SB_PLUS, lineNo, colNo);
    readChar(); 
    return token;
    // ....
    // TODO
    // ....
  default:
    token = makeToken(TK_NONE, lineNo, colNo);
    error(ERR_INVALIDSYMBOL, lineNo, colNo);
    readChar(); 
    return token;
  }
}


/******************************************************************/

void printToken(Token *token) {

  printf("%d-%d:", token->lineNo, token->colNo);

  switch (token->tokenType) {
  case TK_NONE: printf("TK_NONE\n"); break;
  case TK_IDENT: printf("TK_IDENT(%s)\n", token->string); break;
  case TK_NUMBER: printf("TK_NUMBER(%s)\n", token->string); break;
  case TK_CHAR: printf("TK_CHAR(\'%s\')\n", token->string); break;
  case TK_EOF: printf("TK_EOF\n"); break;

  case KW_PROGRAM: printf("KW_PROGRAM\n"); break;
  case KW_CONST: printf("KW_CONST\n"); break;
  case KW_TYPE: printf("KW_TYPE\n"); break;
  case KW_VAR: printf("KW_VAR\n"); break;
  case KW_INTEGER: printf("KW_INTEGER\n"); break;
  case KW_CHAR: printf("KW_CHAR\n"); break;
  case KW_ARRAY: printf("KW_ARRAY\n"); break;
  case KW_OF: printf("KW_OF\n"); break;
  case KW_FUNCTION: printf("KW_FUNCTION\n"); break;
  case KW_PROCEDURE: printf("KW_PROCEDURE\n"); break;
  case KW_BEGIN: printf("KW_BEGIN\n"); break;
  case KW_END: printf("KW_END\n"); break;
  case KW_CALL: printf("KW_CALL\n"); break;
  case KW_IF: printf("KW_IF\n"); break;
  case KW_THEN: printf("KW_THEN\n"); break;
  case KW_ELSE: printf("KW_ELSE\n"); break;
  case KW_WHILE: printf("KW_WHILE\n"); break;
  case KW_DO: printf("KW_DO\n"); break;
  case KW_FOR: printf("KW_FOR\n"); break;
  case KW_TO: printf("KW_TO\n"); break;

  case SB_SEMICOLON: printf("SB_SEMICOLON\n"); break;
  case SB_COLON: printf("SB_COLON\n"); break;
  case SB_PERIOD: printf("SB_PERIOD\n"); break;
  case SB_COMMA: printf("SB_COMMA\n"); break;
  case SB_ASSIGN: printf("SB_ASSIGN\n"); break;
  case SB_EQ: printf("SB_EQ\n"); break;
  case SB_NEQ: printf("SB_NEQ\n"); break;
  case SB_LT: printf("SB_LT\n"); break;
  case SB_LE: printf("SB_LE\n"); break;
  case SB_GT: printf("SB_GT\n"); break;
  case SB_GE: printf("SB_GE\n"); break;
  case SB_PLUS: printf("SB_PLUS\n"); break;
  case SB_MINUS: printf("SB_MINUS\n"); break;
  case SB_TIMES: printf("SB_TIMES\n"); break;
  case SB_SLASH: printf("SB_SLASH\n"); break;
  case SB_LPAR: printf("SB_LPAR\n"); break;
  case SB_RPAR: printf("SB_RPAR\n"); break;
  case SB_LSEL: printf("SB_LSEL\n"); break;
  case SB_RSEL: printf("SB_RSEL\n"); break;
  }
}

int scan(char *fileName) {
  Token *token;

  if (openInputStream(fileName) == IO_ERROR)
    return IO_ERROR;

  token = getToken();
  while (token->tokenType != TK_EOF) {
    printToken(token);
    free(token);
    token = getToken();
  }

  free(token);
  closeInputStream();
  return IO_SUCCESS;
}

/******************************************************************/

int main(int argc, char *argv[]) {
  if (argc <= 1) {
    printf("scanner: no input file.\n");
    return -1;
  }

  if (scan(argv[1]) == IO_ERROR) {
    printf("Can\'t read input file!\n");
    return -1;
  }
    
  return 0;
}



